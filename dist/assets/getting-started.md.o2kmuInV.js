import{_ as i,c as s,o as e,ae as t}from"./chunks/framework.DYYkf9m7.js";const g=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started.md","filePath":"getting-started.md"}'),n={name:"getting-started.md"};function l(r,a,p,h,o,d){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><p>This guide will help you get started with Lingua and integrate it into your project.</p><p>Lingua is designed to integrate seamlessly with your Laravel application to provide translation capabilities to your frontend framework. The primary setup involves installing the Lingua PHP package and then the necessary frontend packages.</p><h2 id="_1-php-package-installation" tabindex="-1">1. PHP Package Installation <a class="header-anchor" href="#_1-php-package-installation" aria-label="Permalink to &quot;1. PHP Package Installation&quot;">​</a></h2><p>First, install the Lingua PHP package in your Laravel project using Composer:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cyberwolfstudio/lingua</span></span></code></pre></div><p>After installing the Composer package, run the Lingua install command to set up the necessary frontend bindings and install the corresponding npm package for your framework:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lingua:install</span></span></code></pre></div><p>This interactive command will prompt you to select your frontend framework (Vue, React, or Svelte) and automatically install the correct npm package (<code>@cyberwolf.studio/lingua-vue</code>, <code>@cyberwolf.studio/lingua-react</code>, or <code>@cyberwolf.studio/lingua-svelte</code>) using your detected package manager (npm, yarn, or pnpm).</p><h2 id="_2-sharing-locale-with-frontend-inertia-js" tabindex="-1">2. Sharing Locale with Frontend (Inertia.js) <a class="header-anchor" href="#_2-sharing-locale-with-frontend-inertia-js" aria-label="Permalink to &quot;2. Sharing Locale with Frontend (Inertia.js)&quot;">​</a></h2><p>If you are using Inertia.js, ensure your current locale is shared with the frontend by adding the following to your <code>HandleInertiaRequest::share</code> method:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/Http/Middleware/HandleInertiaRequests.php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> share</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $request)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> array</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array_merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">parent::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">share</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($request), [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;locale&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() =&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_3-generating-translations" tabindex="-1">3. Generating Translations <a class="header-anchor" href="#_3-generating-translations" aria-label="Permalink to &quot;3. Generating Translations&quot;">​</a></h2><p>To make your Laravel translations available to the frontend, you need to generate them into a JavaScript file. Use the following Artisan command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lingua:generate</span></span></code></pre></div><p>This command will create a JavaScript file (typically <code>./lingua.js</code>) containing your translations.</p><p>For automating this during development, you can use build tool plugins to regenerate translations whenever your language files change. See our <a href="/lingua/automatic-translation-generation.html">Automatic Translation Generation</a> guide for detailed instructions and examples.</p><h2 id="_4-frontend-framework-setup" tabindex="-1">4. Frontend Framework Setup <a class="header-anchor" href="#_4-frontend-framework-setup" aria-label="Permalink to &quot;4. Frontend Framework Setup&quot;">​</a></h2>`,18)]))}const c=i(n,[["render",l]]);export{g as __pageData,c as default};
